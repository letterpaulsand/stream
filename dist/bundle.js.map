{"version":3,"file":"bundle.js","mappings":"MAAA,MAAMA,EAAMC,SAASC,eAAe,OAC9BC,EAAQF,SAASC,eAAe,SAChCE,EAAQH,SAASC,eAAe,YAChCG,EAAMJ,SAASC,eAAe,OAC9BI,EAAYL,SAASC,eAAe,aAC1C,IAAIK,EAAO,IAAIC,KAqCf,SAASC,EAAYN,GACjB,IAAIO,EAAeP,EAAMQ,YACrBC,GAAa,EACjBC,aAAYC,UACR,GAAIF,EACA,OAEJ,IAAIG,EAAaZ,EAAMQ,YACnBD,GAAgBK,GAChBC,QAAQC,IAAI,QACZd,EAAMe,MAAMC,QAAU,OACtBP,GAAa,GAEbF,EAAeP,EAAMQ,cAE1B,KAeP,SAASS,EAASC,EAAUlB,EAAOmB,GACPrB,SAASsB,cAAc,eAAeF,SAE9DlB,EAAMqB,QAAQC,KAAOJ,EACrBlB,EAAMuB,UAAUC,IAAI,SACpBxB,EAAMyB,UAAYN,EAClBnB,EAAMqB,QAAQC,KAAOJ,EACrBlB,EAAM0B,UAAW,EACjBvB,EAAUwB,YAAY3B,IA1EXF,SAASC,eAAe,UAC3B,IAAI6B,IAAIC,SAASC,MACfC,aAAaC,IAAI,KAG/B5B,EAAK6B,GAAG,QAAQ,SAAUC,GACtBrC,EAAIsC,UAAY,cAAcD,OAGlCvB,iBACI,IAAIyB,EAAc,CACdpC,OAAO,EACPqC,OAAO,GAGX,IACI,IAAIC,QAAeC,UAAUC,aAAaC,aAAaL,GACvDpC,EAAMyB,UAAYa,EAClBlC,EAAK6B,GAAG,QAAQtB,MAAAA,IACZ+B,EAAKC,OAAOL,GACZI,EAAKT,GAAG,UAAUd,IACd,IAAIyB,EAAW9C,SAAS+C,cAAc,SACtC5B,EAASyB,EAAKtC,KAAMwC,EAAUzB,GAC9Bb,EAAYsC,SAIpB1C,EAAI4C,iBAAiB,SAAS,MA4BtCnC,eAA0BO,EAAU6B,GAChClC,QAAQC,IAAI,iBAAkBb,EAAM+C,OACnB5C,EAAK6C,KAAK/B,EAAU6B,GAC1Bd,GAAG,UAAUd,IACpBN,QAAQC,IAAI,MACZ,IAAI8B,EAAW9C,SAAS+C,cAAc,SACtC5B,EAASC,EAAU0B,EAAUzB,GAC7Bb,EAAYsC,MAlCRM,CAAWjD,EAAM+C,MAAOV,MAE9B,MAAOa,GACLtC,QAAQuC,MAAMD,IA+CtBE,I","sources":["webpack://videostream/./public/index.js"],"sourcesContent":["const app = document.getElementById('app');\r\nconst video = document.getElementById('video')\r\nconst input = document.getElementById('streamId')\r\nconst btn = document.getElementById('btn')\r\nconst container = document.getElementById('container')\r\nvar peer = new Peer();\r\nconst video1 = document.getElementById('video1')\r\nconst url = new URL(location.href);\r\nconst v = url.searchParams.get('v');\r\n\r\n\r\npeer.on('open', function (id) {\r\n    app.innerText = `My id is : ${id}`\r\n});\r\n\r\nasync function getCameraAndSendStream() {\r\n    let constructor = {\r\n        video: true,\r\n        audio: true\r\n    }\r\n\r\n    try {\r\n        let stream = await navigator.mediaDevices.getUserMedia(constructor)\r\n        video.srcObject = stream\r\n        peer.on('call', async data => {\r\n            data.answer(stream)\r\n            data.on('stream', remoteStream=>{\r\n                let videoNew = document.createElement('video')\r\n                newVideo(data.peer, videoNew, remoteStream)\r\n                checkOnline(videoNew)\r\n            })\r\n            \r\n        })\r\n        btn.addEventListener('click', () => {\r\n            callStream(input.value, stream)\r\n        })\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n\r\n}\r\n\r\nfunction checkOnline(video) {\r\n    let videoCurrent = video.currentTime;\r\n    let leaveState = false\r\n    setInterval(async () => {\r\n        if (leaveState) {\r\n            return\r\n        }\r\n        let videoCheck = video.currentTime\r\n        if (videoCurrent == videoCheck) {\r\n            console.log('left');\r\n            video.style.display = 'none'\r\n            leaveState = true\r\n        } else {\r\n            videoCurrent = video.currentTime\r\n        }\r\n    }, 3000)\r\n}\r\n\r\n\r\nasync function callStream(remoteId, mediaStream) {\r\n    console.log('I call someone', input.value);\r\n    let callStream = peer.call(remoteId, mediaStream)\r\n    callStream.on('stream', remoteStream => {\r\n        console.log('hi');\r\n        let videoNew = document.createElement('video')\r\n        newVideo(remoteId, videoNew, remoteStream)\r\n        checkOnline(videoNew)\r\n    })\r\n}\r\n\r\nfunction newVideo(remoteId, video, remoteStream) {\r\n    let checkVideoElement = document.querySelector(`[data-code='${remoteId}']`)\r\n    if (checkVideoElement) return\r\n    video.dataset.code = remoteId\r\n    video.classList.add('video')\r\n    video.srcObject = remoteStream\r\n    video.dataset.code = remoteId\r\n    video.autoplay = true\r\n    container.appendChild(video)\r\n}\r\n\r\n\r\ngetCameraAndSendStream()\r\n\r\n\r\n\r\n"],"names":["app","document","getElementById","video","input","btn","container","peer","Peer","checkOnline","videoCurrent","currentTime","leaveState","setInterval","async","videoCheck","console","log","style","display","newVideo","remoteId","remoteStream","querySelector","dataset","code","classList","add","srcObject","autoplay","appendChild","URL","location","href","searchParams","get","on","id","innerText","constructor","audio","stream","navigator","mediaDevices","getUserMedia","data","answer","videoNew","createElement","addEventListener","mediaStream","value","call","callStream","e","error","getCameraAndSendStream"],"sourceRoot":""}